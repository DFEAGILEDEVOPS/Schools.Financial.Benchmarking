@using SFB.Web.UI.Helpers.Enums
@using SFB.Web.UI.Helpers.Constants
@using SFB.Web.ApplicationCore.Helpers.Enums

@helper GetAmountHeaderAriaLabel(string unit)
{
    switch ((UnitType)Enum.Parse(typeof(UnitType), unit))
    {
        case UnitType.PercentageOfTotalIncome:
            <text>Percentage of total income</text>;
            break;
        case UnitType.PercentageOfTotalExpenditure:
            <text>Percentage of total expenditure</text>;
            break;
        case UnitType.PerTeacher:
            <text>Amount per teacher</text>
            break;
        case UnitType.PerPupil:
            <text>Amount per pupil</text>
            break;
        case UnitType.HeadcountPerFTE:
            <text>Headcount per full time equivalent</text>
            break;
        case UnitType.FTERatioToTotalFTE:
            <text>Percentage of workforce</text>
            break;
        case UnitType.NoOfPupilsPerMeasure:
            <text>Pupils per measure</text>
            break;
        case UnitType.AbsoluteCount:
            <text>Count</text>
            break;
        default:
            <text>Amount</text>
            break;
    }
}

@helper GetAmountCellAriaLabel(string unit, string chartName)
{
    switch ((UnitType)Enum.Parse(typeof(UnitType), unit))
    {
        case UnitType.PercentageOfTotalExpenditure:
            <text>Percentage of @chartName to total expenditure</text>;
            break;
        case UnitType.PercentageOfTotalIncome:
            <text>Percentage of @chartName to total income</text>;
            break;
        case UnitType.PerTeacher:
            <text>Per teacher @chartName</text>
            break;
        case UnitType.PerPupil:
            <text>Per pupil @chartName</text>
            break;
        case UnitType.HeadcountPerFTE:
            <text>Ratio of Headcount of @chartName per full time equivalent</text>
            break;
        case UnitType.FTERatioToTotalFTE:
            <text>Percentage of @chartName to total workforce</text>
            break;
        case UnitType.NoOfPupilsPerMeasure:
            <text>Pupils per @chartName</text>
            break;
        case UnitType.AbsoluteCount:
            <text>Count of @chartName</text>
            break;
        default:
            <text>@chartName</text>
            break;
    }
}

@helper GetAmountLabel(string unit)
{
    switch ((UnitType)Enum.Parse(typeof(UnitType), unit))
    {
        case UnitType.PercentageOfTotalExpenditure:
        case UnitType.PercentageOfTotalIncome:
            <text>Percentage</text>;
            break;
        case UnitType.AbsoluteCount:
            <text>Count</text>
            break;
        case UnitType.HeadcountPerFTE:
            <text>Ratio</text>
            break;
        case UnitType.FTERatioToTotalFTE:
            <text>Percentage</text>
            break;
        case UnitType.NoOfPupilsPerMeasure:
            <text>Pupils per role</text>
            break;
        default:
            <text>Amount</text>
            break;
    }
}

@helper ScoreText(decimal score, BicProgressScoreType progressScoreType)
{
    if (progressScoreType == BicProgressScoreType.P8)
    {
        if (score < -0.5m)
        {
            @("Well below average")
        }
        else if (score >= -0.5m && score < -0.25m)
        {
            @("Below average")
        }
        else if (score >= -0.25m && score <= 0.25m)
        {
            @("Average")
        }
        else if (score > 0.25m && score <= 0.5m)
        {
            @("Above average")
        }
        else if (score > 0.5m)
        {
            @("Well above average")
        }
    }
    else if (progressScoreType == BicProgressScoreType.KS2)
    {
        if (score < -3m)
        {
            @("Well below average")
        }
        else if (score >= -3m && score < -2m)
        {
            @("Below average")
        }
        else if (score >= -2m && score <= 2m)
        {
            @("Average")
        }
        else if (score > 2m && score <= 3m)
        {
            @("Above average")
        }
        else if (score > 3m)
        {
            @("Well above average")
        }
    }
    else
    {
        @("na")
    }
}

@helper ScoreColorCode(decimal? score, BicProgressScoreType progressScoreType)
{
    if (score.HasValue)
    {

        if (progressScoreType == BicProgressScoreType.P8)
        {
            if (score < -0.5m)
            {
                @("well-below")
            }
            else if (score >= -0.5m && score < -0.25m)
            {
                @("below")
            }
            else if (score >= -0.25m && score <= 0.25m)
            {
                @("average")
            }
            else if (score > 0.25m && score <= 0.5m)
            {
                @("above")
            }
            else if (score > 0.5m)
            {
                @("well-above")
            }
        }
        else if (progressScoreType == BicProgressScoreType.KS2)
        {
            if (score < -3m)
            {
                @("well-below")
            }
            else if (score >= -3m && score < -2m)
            {
                @("below")
            }
            else if (score >= -2m && score <= 2m)
            {
                @("average")
            }
            else if (score > 2m && score <= 3m)
            {
                @("above")
            }
            else if (score > 3m)
            {
                @("well-above")
            }
        }
        else
        {
            @("na")
        }
    }
    else
    {
        @("na")
    }
}

@helper SchoolTabActive(string searchType)
{
    switch (searchType)
    {
        case SearchTypes.SEARCH_BY_NAME_ID:
        case SearchTypes.SEARCH_BY_LA_ESTAB:
        case SearchTypes.SEARCH_BY_LOCATION:
        case SearchTypes.SEARCH_BY_LA_CODE_NAME:
        case null:
            @("active")
            break;
        default:
            @("inactive")
            break;
    }
}

@helper TrustTabActive(string searchType)
{
    switch (searchType)
    {
        case SearchTypes.SEARCH_BY_TRUST_NAME_ID:
        case SearchTypes.SEARCH_BY_TRUST_LOCATION:
        case SearchTypes.SEARCH_BY_TRUST_LA_CODE_NAME:
            @("active")
            break;
        default:
            @("inactive")
            break;
    }
}