@model SFB.Web.Domain.Models.BenchmarkCriteria

@Html.HiddenFor(model => model.MinNoPupil)
@Html.HiddenFor(model => model.MaxNoPupil)

@if (Model.Gender != null)
{
    for (int i = 0; i < Model.Gender.Length; i++)
    {
        @Html.HiddenFor(model => Model.Gender[i])
    }
}

@if (Model.SchoolPhase != null)
{
    for (int i = 0; i < Model.SchoolPhase.Length; i++)
    {
        @Html.HiddenFor(model => Model.SchoolPhase[i])
    }
}

@if (Model.SchoolOverallPhase != null)
{
    for (int i = 0; i < Model.SchoolOverallPhase.Length; i++)
    {
        @Html.HiddenFor(model => Model.SchoolOverallPhase[i])
    }
}

@if (Model.TypeOfEstablishment != null)
{
    for (int i = 0; i < Model.TypeOfEstablishment.Length; i++)
    {
        @Html.HiddenFor(model => Model.TypeOfEstablishment[i])
    }
}

@if (Model.UrbanRural != null)
{
    for (int i = 0; i < Model.UrbanRural.Length; i++)
    {
        @Html.HiddenFor(model => Model.UrbanRural[i])
    }
}


@if (Model.GovernmentOffice != null)
{
    for (int i = 0; i < Model.GovernmentOffice.Length; i++)
    {
        @Html.HiddenFor(model => Model.GovernmentOffice[i])
    }
}

@if (Model.LondonBorough != null)
{
    for (int i = 0; i < Model.LondonBorough.Length; i++)
    {
        @Html.HiddenFor(model => Model.LondonBorough[i])
    }
}

@if (Model.LondonWeighting != null)
{
    for (int i = 0; i < Model.LondonWeighting.Length; i++)
    {
        @Html.HiddenFor(model => Model.LondonWeighting[i])
    }
}

@Html.HiddenFor(model => Model.MinPerFSM)
@Html.HiddenFor(model => Model.MaxPerFSM)

@Html.HiddenFor(model => Model.MinPerSEN)
@Html.HiddenFor(model => Model.MaxPerSEN)

@Html.HiddenFor(model => Model.MinPerSENReg)
@Html.HiddenFor(model => Model.MaxPerSENReg)

@Html.HiddenFor(model => Model.MinPerEAL)
@Html.HiddenFor(model => Model.MaxPerEAL)

@Html.HiddenFor(model => Model.MinPerBoarders)
@Html.HiddenFor(model => Model.MaxPerBoarders)


@if (Model.AdmPolicy != null)
{
    for (int i = 0; i < Model.AdmPolicy.Length; i++)
    {
        @Html.HiddenFor(model => Model.AdmPolicy[i])
    }
}

@if (Model.Pfi != null)
{
    for (int i = 0; i < Model.Pfi.Length; i++)
    {
        @Html.HiddenFor(model => Model.Pfi[i])
    }
}

@Html.HiddenFor(model => Model.SixthForm)

@Html.HiddenFor(model => Model.MinNoSixthForm)
@Html.HiddenFor(model => Model.MaxNoSixthForm)

@Html.HiddenFor(model => Model.MinLowestAgePupils)
@Html.HiddenFor(model => Model.MaxLowestAgePupils)

@Html.HiddenFor(model => Model.MinHighestAgePupils)
@Html.HiddenFor(model => Model.MaxHighestAgePupils)

@Html.HiddenFor(model => Model.MinTeachersWithQualifiedTeacherStatus)
@Html.HiddenFor(model => Model.MaxTeachersWithQualifiedTeacherStatus)

@Html.HiddenFor(model => Model.MinTotalNumberOfTeachingAssistantsFullTimeEquivalent)
@Html.HiddenFor(model => Model.MaxTotalNumberOfTeachingAssistantsFullTimeEquivalent)

@Html.HiddenFor(model => Model.MinFullTimeOther)
@Html.HiddenFor(model => Model.MaxFullTimeOther)

@Html.HiddenFor(model => Model.MinFullTimeAdmin)
@Html.HiddenFor(model => Model.MaxFullTimeAdmin)

@Html.HiddenFor(model => Model.MinTotalSchoolWorkforceFullTimeEquivalent)
@Html.HiddenFor(model => Model.MaxTotalSchoolWorkforceFullTimeEquivalent)

@Html.HiddenFor(model => model.MinTotalNumberOfTeachersFullTimeEquivalent)
@Html.HiddenFor(model => model.MaxTotalNumberOfTeachersFullTimeEquivalent)

@Html.HiddenFor(model => model.MinTotalNumberOfTeachersInTheLeadershipGroupFullTimeEquivalent)
@Html.HiddenFor(model => model.MaxTotalNumberOfTeachersInTheLeadershipGroupFullTimeEquivalent)

@Html.HiddenFor(model => model.MinKs2Actual)
@Html.HiddenFor(model => model.MaxKs2Actual)

@Html.HiddenFor(model => model.MinKs2Progress)
@Html.HiddenFor(model => model.MaxKs2Progress)

@Html.HiddenFor(model => model.MinAvAtt8)
@Html.HiddenFor(model => model.MaxAvAtt8)

@Html.HiddenFor(model => model.MinP8Mea)
@Html.HiddenFor(model => model.MaxP8Mea)

@if (Model.OfstedRating != null)
{
    for (int i = 0; i < Model.OfstedRating.Length; i++)
    {
        @Html.HiddenFor(model => Model.OfstedRating[i])
    }
}

@Html.HiddenFor(model => model.MinSpecLearnDiff)
@Html.HiddenFor(model => model.MaxSpecLearnDiff)

@Html.HiddenFor(model => model.MinModLearnDiff)
@Html.HiddenFor(model => model.MaxModLearnDiff)

@Html.HiddenFor(model => model.MinSevLearnDiff)
@Html.HiddenFor(model => model.MaxSevLearnDiff)

@Html.HiddenFor(model => model.MinProfLearnDiff)
@Html.HiddenFor(model => model.MaxProfLearnDiff)

@Html.HiddenFor(model => model.MinSocialHealth)
@Html.HiddenFor(model => model.MaxSocialHealth)

@Html.HiddenFor(model => model.MinSpeechNeeds)
@Html.HiddenFor(model => model.MaxSpeechNeeds)

@Html.HiddenFor(model => model.MinHearingImpairment)
@Html.HiddenFor(model => model.MaxHearingImpairment)

@Html.HiddenFor(model => model.MinVisualImpairment)
@Html.HiddenFor(model => model.MaxVisualImpairment)

@Html.HiddenFor(model => model.MinMSImpairment)
@Html.HiddenFor(model => model.MaxMSImpairment)

@Html.HiddenFor(model => model.MinPhysicalDisability)
@Html.HiddenFor(model => model.MaxPhysicalDisability)

@Html.HiddenFor(model => model.MinAutisticDisorder)
@Html.HiddenFor(model => model.MaxAutisticDisorder)

@Html.HiddenFor(model => model.MinOtherLearningDiff)
@Html.HiddenFor(model => model.MaxOtherLearningDiff)