@using Newtonsoft.Json
@using SFB.Web.ApplicationCore.Models
@using System.Reflection;
@using Microsoft.Ajax.Utilities
@using SFB.Web.ApplicationCore.Helpers.Enums
@using SFB.Web.ApplicationCore.Helpers.Constants
@using SFB.Web.ApplicationCore.Entities
@using SFB.Web.ApplicationCore.Attributes
@model SFB.Web.UI.Models.BenchmarkChartListViewModel

<table id="criteriaTable" class="govuk-table >
    <thead class="govuk-table__head">
    <tr class="govuk-table__row">
        <th scope="col" class="govuk-table__header">Characteristic</th>
        @if (Model.BenchmarkSchoolData != null)
        {
            <th scope="col" class="govuk-table__header">Default school value</th>
        }
        <th scope="col" class="govuk-table__header">Comparison criteria</th>
    </tr>
    </thead>
    <tbody>
        <tr class="govuk-table__row">
            <td>Finance type</td>
            @if (Model.BenchmarkSchoolData != null && Model.BenchmarkSchoolData.EstabType == EstablishmentType.Academies)
            {
                <td>Academy</td>
            }
            else if (Model.BenchmarkSchoolData != null && Model.BenchmarkSchoolData.EstabType == EstablishmentType.Maintained)
            {
                <td>Maintained</td>
            }
            <td>@Model.SearchedEstablishmentType</td>
        </tr>
        <tr class="govuk-table__row">
            <td>Area</td>
            @if (Model.BenchmarkSchoolData != null)
            {
                <td>@Model.SchoolArea</td>
            }
            <td>@Model.SelectedArea</td>
        </tr>
        @foreach (var property in (typeof(BenchmarkCriteria)).GetProperties())
        {
            var dbAttribute = property.GetCustomAttributes(typeof(DBFieldAttribute)).FirstOrDefault();
            var uiNameAttribute = property.GetCustomAttributes(typeof(PrettyNameAttribute)).FirstOrDefault();

            if (dbAttribute != null && dbAttribute is DBFieldAttribute)
            {
                var fieldValue = Model.AdvancedCriteria.GetType().GetProperty(property.Name).GetValue(Model.AdvancedCriteria, null);
                if (fieldValue != null)
                {
                    @Html.Raw("<tr class="govuk-table__row">")

                    var fieldName = (dbAttribute as DBFieldAttribute).Name;
                    var fieldType = (dbAttribute as DBFieldAttribute).Type;

                    object criteriaValue = null;
                    if (Model.BenchmarkSchoolData != null)
                    {
                        criteriaValue = typeof(SchoolTrustFinancialDataObject).GetProperties().First(p => (p.GetCustomAttributes(typeof(JsonPropertyAttribute), false).First() as JsonPropertyAttribute).PropertyName == fieldName).GetValue(Model.BenchmarkSchoolData.FinancialDataObjectModel);
                    }
                    var uiName = (uiNameAttribute as PrettyNameAttribute).Name;
                    if (!uiName.IsNullOrWhiteSpace())
                    {
                        switch (fieldType)
                        {
                            case CriteriaFieldComparisonTypes.MIN:
                                @Html.Raw($"<td>{uiName} (minimum)</td>")
                                if (criteriaValue != null)
                                {
                                    @Html.Raw($"<td>{criteriaValue}</td>")
                                }
                                @Html.Raw($"<td>{fieldValue}</td>")
                                break;
                            case CriteriaFieldComparisonTypes.MAX:
                                @Html.Raw($"<td>{uiName} (maximum)</td>")
                                if (criteriaValue != null)
                                {
                                    @Html.Raw($"<td>{criteriaValue}</td>")
                                }
                                @Html.Raw($"<td>{fieldValue}</td>")
                                break;
                            case CriteriaFieldComparisonTypes.EQUALTO:
                                if (fieldValue is string)
                                {
                                    @Html.Raw($"<td>{uiName}</td>")
                                    if (criteriaValue != null)
                                    {
                                        @Html.Raw($"<td>{criteriaValue}</td>")
                                    }
                                    @Html.Raw($"<td>{fieldValue}</td>")
                                }
                                else if (fieldValue is int)
                                {
                                    @Html.Raw($"<td>{uiName}</td>")
                                    if (criteriaValue != null)
                                    {
                                        @Html.Raw($"<td>{criteriaValue}</td>")
                                    }
                                    @Html.Raw($"<td>{fieldValue}</td>")
                                }
                                else if (fieldValue is Array)
                                {
                                    @Html.Raw($"<td>{uiName}</td>")
                                    if (criteriaValue != null)
                                    {
                                        @Html.Raw($"<td>{criteriaValue}</td>")
                                    }
                                    @Html.Raw("<td>")
                                    @Html.Raw(string.Join(", ", fieldValue as string[]))
                                    @Html.Raw("</td>")
                                }
                                break;
                        }

                        @Html.Raw("</tr>")
                    }
                }
            }
        }
    </tbody>
</table>