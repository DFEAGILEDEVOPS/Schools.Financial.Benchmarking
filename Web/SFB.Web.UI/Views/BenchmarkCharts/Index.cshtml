@using SFB.Web.Domain.Helpers.Enums
@using SFB.Web.UI.Helpers.Enums

@model SFB.Web.UI.Models.BenchmarkChartListViewModel

@{
    ViewBag.Title = "Schools Financial Benchmarking";
    ViewBag.pageClass = "benchmarking-charts";
}

@section InsideHead{
    <link href="~/public/assets/print/bmc-print.css" media="print" rel="stylesheet" type="text/css">
    <script src="~/node_modules/angular/angular.min.js"></script>
}


@if (Model.EstablishmentType != EstablishmentType.MAT)
{
    @Html.Partial("Partials/BenchmarkListBanner")
}

@Html.Partial("Partials/SearchForSchoolsPanel")

<div id="BackToBMCharts" class="grid-row hide-in-print" style="display: none">
    <div class="column-full">
        <span class="back-chevron">&#706;</span>
        <a class="home-link" href="javascript: location.reload();">Back to benchmarking charts</a>
    </div>
</div>

<h1 id="BCHeader" class="heading-xlarge page-heading">Benchmarking charts</h1>

@if (Model.SchoolComparisonList != null && !string.IsNullOrEmpty(Model.SchoolComparisonList.HomeSchoolName))
{
    if (Model.BmSchoolInList())
    {
        <div class="grid-row">
            <div class="column-full">
                <span>Comparing</span>
                <div class="highlight">
                    <span class="bold-xsmall">@Model.SchoolComparisonList.HomeSchoolName</span>
                </div>
                @if (Model.ComparisonType == ComparisonType.Advanced)
                {
                    <span>&nbsp;to schools</span>
                    <span class="bold-small"> with characteristics you've chosen</span>
                }
                else if (Model.ComparisonType == ComparisonType.Basic)
                {
                    <span>&nbsp;to schools</span>
                    <span class="bold-small"> matching your chosen characteristics</span>
                }
            </div>
        </div>
    }
    if (Model.ComparisonType != ComparisonType.Manual)
    {
        <div class="grid-row">
            <div class="column-full">
                <details class="criteria-details">
                    <summary class="hide-in-print">
                        <span class="summary">View or change characteristics used</span>
                    </summary>
                    <div class="panel panel-border-narrow criteria-detail">
                        @if (Model.ComparisonType == ComparisonType.Advanced)
                        {
                            Html.RenderPartial("Partials/AdvancedHiddenFields");
                            Html.RenderPartial("Partials/UsedAdvancedCriteria");
                        }
                        else if (Model.ComparisonType == ComparisonType.Basic)
                        {
                            Html.RenderPartial("Partials/BasicHiddenFields");
                            Html.RenderPartial("Partials/UsedBasicCriteria");
                        }
                    </div>
                </details>
            </div>
        </div>
    }
}

@if (Model.EstablishmentType == EstablishmentType.MAT)
{
    <div class="grid-row">
        <div class="column-full">
            <span>Comparing</span>
            <div class="highlight">
                <span class="bold-xsmall">@Model.TrustComparisonList.DefaultTrustName</span>
            </div>
            <span>&nbsp;to selected trusts. You can </span>
            <a href="/TrustComparison?matno=@Model.TrustComparisonList.DefaultTrustMatNo&matName=@Model.TrustComparisonList.DefaultTrustName">view or edit these.</a>
        </div>
    </div>
}

@if (Model.NoResultsForSimpleSearch)
{
    <div class="panel panel-border-wide orange-warning">
        <p>
            No similar schools were found. Change the characteristics used or try the
            <a href="/BenchmarkCriteria/StepOne?comparisonType=Advanced&Urn=@Model.SchoolComparisonList.HomeSchoolUrn">Advanced search</a>.
        </p>
    </div>
}
else
{
    <div class="grid-row download-links hide-in-print">
        <div id="downloadLinkContainer" class="column-one-third">
            <div class="download">
                <a class="no-underline bold-xsmall" href="/BenchmarkCharts/Download?type=@Model.EstablishmentType"><img class="icon" src="~/public/assets/images/icons/icon-file-download.png" /> Download benchmark data (CSV)</a>
            </div>
        </div>
        <div class="column-one-third">
            <div class="print">
                <a id="PrintLink" class="no-underline bold-xsmall" href="javascript:PrintPage()"><img class="icon" src="~/public/assets/images/icons/icon-print.png" /><span id="PrintLinkText"> Print page</span></a>
            </div>
        </div>
    </div>


    if (Model.EstablishmentType == EstablishmentType.MAT)
    {
        if (Model.HasIncompleteFinancialData)
        {
            <div class="panel panel-border-wide orange-warning">
                <p>
                    Some trusts don't have a complete set of data for this period
                </p>
            </div>
        }  
    }
    else
    {
        if (Model.HasIncompleteFinancialData)
        {
            <div class="panel panel-border-wide orange-warning">
                <p>
                    Some schools don't have a complete set of data for this period
                </p>
            </div>
        }
    }

    <div id="CustomReportContentPlaceHolder" ng-app="reportApp">
        <div id="listCtrl" ng-controller="ChartListController as ctrl">
            @Html.Partial("~/Views/BenchmarkCharts/Partials/TabControls.cshtml")
            <div id="tabsSection">
                @Html.Partial("Partials/TabContent")
            </div>
            @if (Model.EstablishmentType != EstablishmentType.MAT)
            {
                <div id="customTabSection" style="display: none">
                    @Html.Partial("Partials/CustomTabContent")
                </div>
            }
        </div>
    </div>

    <a href="#pagetop" class="page-top mobile-only hide-in-print">Back to top</a>
    <input type="hidden" id="Type" name="Type" value="@Model.EstablishmentType"/>
}

@section ViewScripts {

    <script src="~/node_modules/d3/d3.min.js"></script>
    <script src="~/node_modules/c3/c3.min.js"></script>
    <script src="~/node_modules/lodash/lodash.min.js"></script>
    <script src="~/public/scripts/jquery-tablesorter/jquery.tablesorter.uk.currency.js"></script>
    <script src="~/public/scripts/saveSvgAsPng-gh-pages/saveSvgAsPng.js"></script>
    <script src="~/public/scripts/saveSvgAsPng-gh-pages/rgbcolor.js"></script> 
    <script src="~/public/scripts/saveSvgAsPng-gh-pages/StackBlur.js"></script>
    <script src="~/public/scripts/saveSvgAsPng-gh-pages/canvg.js"></script> 
    <script src="/Assets/Scripts/AngularJS/reportApp.js"></script>
    
    <script>

        $(document).ready(function() {
            $("table").tablesorter();
            GenerateCharts();
            RefreshAddRemoveLinks();
            $('.save-as-image').show();
        });

        function saveAsImage(name, id) {
            var svg = $('#'+id).find('svg')[0];
            saveSvgAsPng(svg, name + '.png', { canvg: canvg, backgroundColor: 'white'});
        }

        function ChangeTab(tab) {
            if (tab === "Custom") {
                $(".tabs li").removeClass("active");
                $(".tabs li#" + tab).addClass("active");
                $("#tabsSection").empty('');
                $("#customTabSection").show();
            } else {
                var unitParameter = $("#ShowValue").val();
                unitParameter = unitParameter ? unitParameter : "AbsoluteMoney";
                $.get("/benchmarkcharts/tabchange?tab=" + tab + "&type=@Model.EstablishmentType.ToString()&showValue=" + unitParameter,
                    function (data) {
                        $(".tabs li").removeClass("active");
                        $(".tabs li#" + tab).addClass("active");
                        $("#customTabSection").hide();
                        $("#tabsSection").html(data);
                        $("table").tablesorter();
                        var unitParameter = $("#ShowValue").val();
                        RefreshAddRemoveLinks();
                        $('.save-as-image').show();
                        GenerateCharts(unitParameter);
                    });
            }
        }

        //This function is accessing to the scope of the AngularJS controller in the 'Your Charts' tab to sync the chart selections in other tabs.
        //An AngularJS module is only instantiated and lives within "Your Charts" tab. As the other tab views are partially loaded, it was not possible to use 
        //that AngularJS module within these tabs.
        function RefreshAddRemoveLinks() {
            var showRemoveLink = function(element) {
                $(element).find("a.customRemove").show();
                $(element).find("a.customAdd").hide();
            }

            var showAddLink = function(element) {
                $(element).find("a.customAdd").show();
                $(element).find("a.customRemove").hide();
            }

            var scope = angular.element($("#listCtrl")).scope();
            if (scope) {
                scope.dataLoaded.then(
                    function() {
                        $(".customActions").each(function() {
                            var self = this;
                            var fieldName = $(self).attr("data-fn");
                            var showValue = $(self).attr("data-sv");

                            _.forEach(scope.selectionList.HierarchicalCharts,
                                function(group) {
                                    var selection = _.find(group.Charts,
                                        function(c) {
                                            return c.FieldName === fieldName;
                                        });

                                    if (selection) {
                                        switch (showValue) {
                                        case 'PerPupil':
                                            selection.PerPupilSelected ? showRemoveLink(self) : showAddLink(self);
                                            break;
                                        case 'PerTeacher':
                                            selection.PerTeacherSelected ? showRemoveLink(self) : showAddLink(self);
                                            break;
                                        case 'PercentageOfTotal':
                                            selection.PercentageSelected ? showRemoveLink(self) : showAddLink(self);
                                            break;
                                        case 'AbsoluteMoney':
                                            selection.AbsoluteMoneySelected ? showRemoveLink(self) : showAddLink(self);
                                            break;
                                        case 'AbsoluteCount':
                                            selection.AbsoluteCountSelected ? showRemoveLink(self) : showAddLink(self);
                                            break;
                                        case 'HeadcountPerFTE':
                                            selection.HeadCountPerFTESelected
                                                ? showRemoveLink(self)
                                                : showAddLink(self);
                                            break;
                                        case 'FTERatioToTotalFTE':
                                            selection.PercentageOfWorkforceSelected
                                                ? showRemoveLink(self)
                                                : showAddLink(self);
                                            break;
                                        case 'NoOfPupilsPerMeasure':
                                            selection.NumberOfPupilsPerMeasureSelected
                                                ? showRemoveLink(self)
                                                : showAddLink(self);
                                            break;
                                        }
                                    }
                                });
                        });
                    });
            }
        }

        //This function is accessing to the scope of the AngularJS controller in the 'Your Charts' tab to sync the chart selections in other tabs.
        function AddRemoveYourCharts(fieldName, showValue, checked) {
            var scope = angular.element($("#listCtrl")).scope();
            scope.$apply(function() {
                _.forEach(scope.selectionList.HierarchicalCharts,
                    function(group) {
                        var selection = _.find(group.Charts,
                            function(c) {
                                return c.FieldName === fieldName;
                            });

                        if (selection) {
                            switch (showValue) {
                            case 'PerPupil':
                                selection.PerPupilSelected = checked;
                                break;
                            case 'PerTeacher':
                                selection.PerTeacherSelected = checked;
                                break;
                            case 'PercentageOfTotal':
                                selection.PercentageSelected = checked;
                                break;
                            case 'AbsoluteMoney':
                                selection.AbsoluteMoneySelected = checked;
                                break;
                            case 'AbsoluteCount':
                                selection.AbsoluteCountSelected = checked;
                                break;
                            case 'HeadcountPerFTE':
                                selection.HeadCountPerFTESelected = checked;
                                break;
                            case 'FTERatioToTotalFTE':
                                selection.PercentageOfWorkforceSelected = checked;
                                break;
                            case 'NoOfPupilsPerMeasure':
                                selection.NumberOfPupilsPerMeasureSelected = checked;
                                break;
                            }
                        }
                    });
                scope.ctrl.persist();
            });

            RefreshAddRemoveLinks();
        }


        function GenerateCharts(unitParameter) {
            $(".chart").each(function() {
                var yValues = JSON.parse($('#' + this.id).attr('data-chart'));
                var unit = unitParameter ? unitParameter : yValues[0].unit;
                var minBy = _.minBy(yValues, function(o) { return o.amount; });
                var minimum = minBy ? minBy.amount : 0;
                var maxBy = _.maxBy(yValues, function(o) { return o.amount; });
                var maximum = maxBy ? maxBy.amount : 0;
                if (minimum === 0 && maximum === 0) {
                    GenerateChart(this, unit, 0, 0, 0, yValues.length);
                } else if (minimum === maximum) {
                    self.GenerateChart(this, unit, minimum, minimum, minimum, yValues.length);
                } else {
                    if (minimum > 0) {
                        minimum = 0;
                    }
                    var range = RoundedTickRange(minimum, maximum);
                    var newMin = (minimum < 0)
                        ? (range * Math.floor(minimum / range))
                        : (range * Math.round(minimum / range));
                    var newMax = range * Math.ceil(maximum / range);
                    GenerateChart(this, unit, newMin, newMin + range, newMax, yValues.length);
                }
            });
        }

        function PrintPage() {
            $('details').attr('open', 'true');
            window.print();
        }

        function RoundedTickRange(min, max) {
            var range = max - min;
            var tickCount = 3;
            var unroundedTickSize = range / (tickCount - 1);
            var x = Math.ceil(Math.log10(unroundedTickSize) - 1);
            var pow10x = Math.pow(10, x);
            var roundedTickRange = Math.ceil(unroundedTickSize / pow10x) * pow10x;
            return roundedTickRange;
        }

        function GenerateChart(el, showValue, min, mid, max, barCount) {
            showValue = showValue || "AbsoluteMoney";
            var paddingBottom = 0;
            var yAxis, yFormat;
            switch (showValue) {
            case "AbsoluteCount":
                yAxis = {
                    tick: {
                        format: function(d) { return window.DfE.Util.Charting.ChartIntegerFormat(d); },
                        values: function () { return ($(window).width() <= 640) ? [max] : [min, mid, max] },
                        count: 3
                    },
                    min: min,
                    max: max,
                    padding: {
                        bottom: paddingBottom
                    }
                };
                yFormat = function(d) { return window.DfE.Util.Charting.ChartIntegerFormat(d); }
                break;
            case "AbsoluteMoney":
                yAxis = {
                    tick: {
                        format: function(d) { return window.DfE.Util.Charting.ChartMoneyFormat(d); },
                        values: function () { return ($(window).width() <= 640) ? [max] : [min, mid, max]},
                        count: 3
                    },
                    min: min,
                    max: max,
                    padding: {
                        bottom: paddingBottom
                    }
                };
                yFormat = function(d) { return window.DfE.Util.Charting.ChartMoneyFormat(d); };
                break;
            case "PerPupil":
                yAxis = {
                    tick: {
                        format: function(d) { return window.DfE.Util.Charting.ChartMoneyFormat(d); },
                        values: function () { return ($(window).width() <= 640) ? [max] : [min, mid, max] },
                        count: 3
                    },
                    min: min,
                    max: max,
                    padding: {
                        bottom: paddingBottom
                    }
                };
                yFormat = function(d) {
                    if (d === null) {
                        return "No pupil data";
                    } else {
                        return window.DfE.Util.Charting.ChartMoneyFormat(d);
                    }
                };
                break;
            case "PerTeacher":
                yAxis = {
                    tick: {
                        format: function(d) { return window.DfE.Util.Charting.ChartMoneyFormat(d); },
                        values: function () { return ($(window).width() <= 640) ? [max] : [min, mid, max] },
                        count: 3
                    },
                    min: min,
                    max: max,
                    padding: {
                        bottom: paddingBottom
                    }
                };
                yFormat = function(d) {
                    if (d === null) {
                        return "No teacher data";
                    } else {
                        return window.DfE.Util.Charting.ChartMoneyFormat(d);
                    }
                };
                break;
            case "PercentageOfTotal":
            case "FTERatioToTotalFTE":
                yAxis = {
                    tick: {
                        format: function(d) { return window.DfE.Util.Charting.ChartPercentageFormat(d); },
                        values: function () { return ($(window).width() <= 640) ? [max] : [min, mid, max] },
                        count: 3
                    },
                    min: min,
                    max: max,
                    padding: {
                        bottom: paddingBottom,
                        top: 50
                    }
                };
                yFormat = function(d) { return window.DfE.Util.Charting.ChartPercentageFormat(d); };
                break;
            case "NoOfPupilsPerMeasure":
            case "HeadcountPerFTE":
                yAxis = {
                    tick: {
                        format: function(d) { return window.DfE.Util.Charting.ChartDecimalFormat(d); },
                        values: function () { return ($(window).width() <= 640) ? [max] : [min, mid, max] },
                        count: 3
                    },
                    min: min,
                    max: max,
                    padding: {
                        bottom: paddingBottom
                    }
                };
                yFormat = function(d) { return window.DfE.Util.Charting.ChartDecimalFormat(d); };
                break;
            }

            c3.generate({
                bindto: '#' + el.id,
                data: {
                    json: JSON.parse($('#' + el.id).attr('data-chart')),
                    keys: {
                        x: 'school',
                        value: ['amount']
                    },
                    type: 'bar',
                    labels: {
                        format: yFormat
                    }
                },
                size: {
                    height: (barCount + 1) * 30
                },
                bar: {
                    width: 20
                },
                axis: {
                    y: yAxis,
                    x: {
                        type: 'category', // this needed to load string x value
                        tick: {
                            centered: true,
                            multiline: false
                        }
                    },
                    rotated: true
                },
                legend: {
                    show: false
                },
                color: {
                    pattern: ['#097F96']
                },
                tooltip: {
                    show: false
                },
                onrendered: function() {
                    ApplyChartStyles(el);
                    AddSchoolLinks(el.id);
                }
            });
        };

        function ApplyChartStyles(el) {
            var benchmarkSchoolIndex = $("#benchmarkSchoolIndex", el.parentElement.parentElement.parentElement)[0]
                .value;
            if (benchmarkSchoolIndex > -1) {
                $("#" +
                    el.id +
                    " .c3-shape.c3-shape-" +
                    benchmarkSchoolIndex +
                    ".c3-bar.c3-bar-" +
                    benchmarkSchoolIndex).css("fill", "#D53880");
            }

            var incompleteDataIndex = $("#incompleteDataIndex", el.parentElement.parentElement.parentElement)[0].value;
            var incompleteDataIndexArray = incompleteDataIndex.split(",");
            if (incompleteDataIndexArray.length > 0) {
                incompleteDataIndexArray.forEach(function(index) {
                    $("#" +
                        el.id +
                        " .c3-shape.c3-shape-" +
                        index +
                        ".c3-bar.c3-bar-" +
                        index).css("fill", "#F47738");
                });
            }
        }

        function AddSchoolLinks(id) {
            var texts = $("#" + id + " .c3-axis-x g.tick text tspan");

            texts.each(function() {
                var textParts = $(this).text().split("#");

                var type = $("#Type").val();

                if (type === "MAT") {
                    $(this).on('click',
                        function(e, i) {
                            window.open("/trust/index?matno=" + textParts[1] + "&name=" + textParts[0], '_self');
                        });
                } else {
                    $(this).on('click',
                        function(e, i) {
                            window.open("/school/detail?urn=" + textParts[1], '_self');
                        });
                }
                var limit = 36;
                var text = textParts[0].length < limit ? textParts[0] : textParts[0].substring(0, limit - 3) + "...";
                $(this).text(text);

            });
        }

        function RebuildCharts() {
            var tabParameter = $("#tabSelection").val();
            var chartGroupParameter = $("#ChartGroup").val();
            var unitParameter = $("#ShowValue").val();
            var centralFinancing = $("#CentralFinancing").val();
            var trustCentralFinancing = $("#TrustCentralFinancing").val();
            var type = $("#Type").val();

            var url = "/benchmarkcharts/getcharts?revgroup=" +
                tabParameter +
                "&showValue=" +
                unitParameter +
                "&chartGroup=" +
                chartGroupParameter;

            if (centralFinancing) {
                url += "&centralFinancing=" + centralFinancing;
            }

            if (trustCentralFinancing) {
                url += "&trustCentralFinancing=" + trustCentralFinancing;
            }

            if (type) {
                url += "&type=" + type;
            }

            $.get(url,
                function(data) {
                    $("#benchmarkChartsList").html(data);
                    RefreshAddRemoveLinks();
                    $('.save-as-image').show();
                    GenerateCharts(unitParameter);
                    $("table").tablesorter();
                });
        }
    </script>

}